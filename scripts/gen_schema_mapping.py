# scripts/gen_schema_mapping.py

import json
from pathlib import Path

from scripts.schema_mapping_config import SCHEMA_MAPPING

BASE_DIR = Path(__file__).resolve().parent.parent


def validate_and_generate_mapping(mapping: dict) -> str:
    output_lines = [
        "# SCHEMA_MAPPING.md",
        "",
        "This document defines the 1:1 mapping between schema definition sources (`schemas/source/*.py`),",
        "corresponding JSON Schema outputs (`schemas/outputs/*.schema.json`), and example payloads",
        "(`schemas/examples/<schema>/sample_{input,output}.json`).",
        "",
        "This mapping ensures every schema is versioned, testable, and traceable across the A3CP system.",
        "",
        "---",
        "",
        "## Mapping Table",
        "",
        "| Pydantic Model | JSON Schema | Input Example | Output Example |",
        "|----------------|-------------|----------------|-----------------|",
    ]

    for model_name, entry in mapping.items():
        try:
            source_path = BASE_DIR / entry["source"]
            schema_path = BASE_DIR / entry["schema"]
            examples = entry.get("examples", [])

            # Verify all listed files exist
            all_paths = [source_path, schema_path] + [BASE_DIR / ex for ex in examples]
            for path in all_paths:
                if not path.exists():
                    raise FileNotFoundError(f"Missing file: {path}")

            # Validate each example file is proper JSON
            for example_file in examples:
                try:
                    with open(BASE_DIR / example_file, "r") as f:
                        json.load(f)
                except json.JSONDecodeError as e:
                    raise ValueError(f"Invalid JSON in {example_file}") from e

            input_file = next((ex for ex in examples if "input" in ex), "")
            output_file = next((ex for ex in examples if "output" in ex), "")

            output_lines.append(
                f"| {Path(entry['source']).name} | {Path(entry['schema']).name} | {input_file} | {output_file} |"
            )
        except Exception as e:
            raise RuntimeError(
                f"Error while processing schema mapping for '{model_name}'"
            ) from e

    output_lines += [
        "",
        "---",
        "",
        "## Notes",
        "",
        "- This file is auto-generated by `scripts/gen_schema_mapping.py`.",
        "- Do not edit manually; regenerate after any schema/interface/example change.",
    ]

    return "\n".join(output_lines)


if __name__ == "__main__":
    markdown = validate_and_generate_mapping(SCHEMA_MAPPING)

    out_path = BASE_DIR / "SCHEMA_MAPPING.md"
    with open(out_path, "w") as f:
        f.write(markdown)

    print(f"SCHEMA_MAPPING.md generated at: {out_path}")
